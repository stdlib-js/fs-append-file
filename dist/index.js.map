{
  "version": 3,
  "sources": ["../lib/async.js", "../lib/sync.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar append = require( 'fs' ).appendFile;\n\n\n// MAIN //\n\n/**\n* Asynchronously append data to a file, creating the file if it does not yet exist.\n*\n* @param {(string|Buffer|integer)} path - file path or file descriptor\n* @param {(string|Buffer)} data - data to append\n* @param {(Object|string)} [options] - options\n* @param {Function} clbk - callback to invoke after appending data to the file\n*\n* @example\n* function onAppend( err ) {\n*     if ( err ) {\n*         console.log( err.message );\n*     }\n* }\n*\n* appendFile( './beep/boop.txt', 'appended something\\n', onAppend );\n*/\nfunction appendFile() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor (i = 0; i < arguments.length; i++) {\n\t\targs.push( arguments[i] );\n\t}\n\tappend.apply( null, args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = appendFile;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar appendFile = require( 'fs' ).appendFileSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously append data to a file, creating the file if it does not yet exist.\n*\n* @param {(string|Buffer|integer)} path - file path or file descriptor\n* @param {(string|Buffer)} data - data to append\n* @param {(Object|string)} [options] - options\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = appendFileSync( './beep/boop.txt', 'data to append\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction appendFileSync( path, data, options ) {\n\ttry {\n\t\tif ( arguments.length > 2 ) {\n\t\t\tappendFile( path, data, options );\n\t\t} else {\n\t\t\tappendFile( path, data );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = appendFileSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Append data to a file.\n*\n* @module @stdlib/fs-append-file\n*\n* @example\n* var appendFile = require( '@stdlib/fs-append-file' );\n*\n* function onAppend( err ) {\n*     if ( err ) {\n*         console.log( err.message );\n*     }\n* }\n*\n* appendFile( './beep/boop.txt', 'appended something\\n', onAppend );\n*\n* @example\n* var appendFileSync = require( '@stdlib/fs-append-file' ).sync;\n*\n* var err = appendFileSync( './beep/boop.txt', 'data to append\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar async = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( async, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = async;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,IAAK,EAAE,WAsB7B,SAASC,GAAa,CACrB,IAAIC,EACAC,EAEJ,IADAD,EAAO,CAAC,EACHC,EAAI,EAAGA,EAAI,UAAU,OAAQA,IACjCD,EAAK,KAAM,UAAUC,CAAC,CAAE,EAEzBH,EAAO,MAAO,KAAME,CAAK,CAC1B,CAKAH,EAAO,QAAUE,ICzDjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,IAAK,EAAE,eAmBjC,SAASC,EAAgBC,EAAMC,EAAMC,EAAU,CAC9C,GAAI,CACE,UAAU,OAAS,EACvBJ,EAAYE,EAAMC,EAAMC,CAAQ,EAEhCJ,EAAYE,EAAMC,CAAK,CAEzB,OAAUE,EAAM,CACf,OAAOA,CACR,CACA,OAAO,IACR,CAKAN,EAAO,QAAUE,ICTjB,IAAIK,EAAc,QAAS,uDAAwD,EAC/EC,EAAQ,IACRC,EAAO,IAKXF,EAAaC,EAAO,OAAQC,CAAK,EAKjC,OAAO,QAAUD",
  "names": ["require_async", "__commonJSMin", "exports", "module", "append", "appendFile", "args", "i", "require_sync", "__commonJSMin", "exports", "module", "appendFile", "appendFileSync", "path", "data", "options", "err", "setReadOnly", "async", "sync"]
}
