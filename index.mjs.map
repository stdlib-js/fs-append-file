{"version":3,"file":"index.mjs","sources":["../lib/async.js","../lib/sync.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar append = require( 'fs' ).appendFile;\n\n\n// MAIN //\n\n/**\n* Asynchronously append data to a file, creating the file if it does not yet exist.\n*\n* @param {(string|Buffer|integer)} path - file path or file descriptor\n* @param {(string|Buffer)} data - data to append\n* @param {(Object|string)} [options] - options\n* @param {Function} clbk - callback to invoke after appending data to the file\n*\n* @example\n* function onAppend( err ) {\n*     if ( err ) {\n*         console.log( err.message );\n*     }\n* }\n*\n* appendFile( './beep/boop.txt', 'appended something\\n', onAppend );\n*/\nfunction appendFile() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor (i = 0; i < arguments.length; i++) {\n\t\targs.push( arguments[i] );\n\t}\n\tappend.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default appendFile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar appendFile = require( 'fs' ).appendFileSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously append data to a file, creating the file if it does not yet exist.\n*\n* @param {(string|Buffer|integer)} path - file path or file descriptor\n* @param {(string|Buffer)} data - data to append\n* @param {(Object|string)} [options] - options\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = appendFileSync( './beep/boop.txt', 'data to append\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction appendFileSync( path, data, options ) {\n\ttry {\n\t\tif ( arguments.length > 2 ) {\n\t\t\tappendFile( path, data, options );\n\t\t} else {\n\t\t\tappendFile( path, data );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default appendFileSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Append data to a file.\n*\n* @module @stdlib/fs-append-file\n*\n* @example\n* import appendFile from '@stdlib/fs-append-file';\n*\n* function onAppend( err ) {\n*     if ( err ) {\n*         console.log( err.message );\n*     }\n* }\n*\n* appendFile( './beep/boop.txt', 'appended something\\n', onAppend );\n*\n* @example\n* import { sync as appendFileSync } from '@stdlib/fs-append-file';\n*\n* var err = appendFileSync( './beep/boop.txt', 'data to append\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport async from './async.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( async, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default async;\n"],"names":["append","require$$0","appendFile","args","i","arguments","length","push","apply","appendFileSync","path","data","options","err","setReadOnly","async","sync"],"mappings":";;8mBAsBIA,EAASC,EAAgBC,WAsB7B,SAASA,IACR,IAAIC,EACAC,EAEJ,IADAD,EAAO,GACFC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IACjCD,EAAKI,KAAMF,UAAUD,IAEtBJ,EAAOQ,MAAO,KAAML,EACrB,CC9BA,IAAID,EAAaD,EAAgBQ,eAmBjC,SAASA,EAAgBC,EAAMC,EAAMC,GACpC,IACMP,UAAUC,OAAS,EACvBJ,EAAYQ,EAAMC,EAAMC,GAExBV,EAAYQ,EAAMC,EAEnB,CAAC,MAAQE,GACT,OAAOA,CACP,CACD,OAAO,IACR,CCGAC,EAAAC,EAAA,OAAAC"}